{"version":3,"sources":["components/Node/Node.js","components/Node/Spot.js","components/Board/Board.js","algorithms/aStar.js","algorithms/bfs.js","algorithms/dfs.js","algorithms/dijkstra.js","components/Menu/Visualizer.js","components/Menu/VisualizeWall.js","wallAlgos/recursiveWall.js","wallAlgos/stairWall.js","wallAlgos/randomWall.js","images/arrow_down.png","components/Menu/DropDown.js","components/Menu/DropDownSpeed.js","components/Menu/Menu.js","components/Legend.js","App.js","index.js"],"names":["Node","setWall","isStart","isEnd","row","col","isWall","classes","onMouseLeave","onMouseDown","onMouseOver","onMouseUp","id","className","Spot","i","j","rows","columns","this","x","y","addneighbours","grid","neighbours","push","g","f","h","previous","undefined","d","Infinity","parent","color","visited","Board","setGrid","setStartNode","setEndNode","useState","wallState","setWallState","startState","setStartState","endState","setEndState","useEffect","newBoard","Array","addNeighbours","e","eleArr","idToGridXY","target","thisClassName","document","getElementById","type","includes","eleIdStr","split","slice","map","rowIndex","colIndex","heuristic","a","b","Math","abs","aStar","startNode","endNode","openSet","closedSet","visitedNodes","length","leastIndex","current","curr","path","splice","neighbour","gScore","gScoreIsBest","bfs","u","queue","shift","found","recDfs","dfs","Relax","k","w","dijkstra","s","visualizePath","algoPath","visSpeed","speed","setTimeout","shortestPathNodes","reversed","reverse","node","visualizeShortestPath","visualizeWall","wallPath","divide","width","height","orientation","skew","horizontal","wallX","veryRand","wallY","passStart","random","passageX","passageY","dx","dy","len","newX","newY","chooseOrientation","min","max","floor","recursiveWall","stairWall","randomWall","console","log","DropDown","dropName","itemArray","dropOpen","setDropOpen","closeDrop","onBlur","onClick","src","arrowDown","algo","vis","name","initialSpeed","setVisSpeed","Menu","resetBoard","clearBoard","visualizeAstar","aStarPath","visualizeBFS","bfsPath","visualizeDFS","dfsPath","visualizeDijkstra","dijkstraPath","visualizeStairWall","stairWallPath","visualizeRandomWall","randomWallPath","algoArray","mazeArray","recursiveWallPath","window","location","reload","DropDownSpeed","Legend","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.817d030f.chunk.js","sourcesContent":["import React from 'react';\nimport '../../styles/Node.css';\n\nexport const Node = ({ setWall, isStart, isEnd, row, col, isWall }) => {\n    const classes = isStart ? 'node-start' : isWall ? 'node-wall' : isEnd ? 'node-end' : '';\n\n    return (\n        <div\n            onMouseLeave={setWall}\n            onMouseDown={setWall}\n            onMouseOver={setWall}\n            onMouseUp={setWall}\n            id={`${row}-${col}`}\n            className={`node ${classes}`}\n        />\n    );\n};\n\nexport default Node;","function Spot(i, j, rows, columns) {\n    this.x = i;\n    this.y = j;\n    this.isStart = this.x === 14 && this.y === 10;\n    this.isEnd = this.x === 14 && this.y === 50;\n    this.isWall = false;\n    this.addneighbours = function (grid) {\n        let i = this.x;\n        let j = this.y;\n        if (j > 0) this.neighbours.push(grid[i][j - 1]);\n        if (i > 0) this.neighbours.push(grid[i - 1][j]);\n        if (j < columns - 1) this.neighbours.push(grid[i][j + 1]);\n        if (i < rows - 1) this.neighbours.push(grid[i + 1][j]);\n    };\n\n    //A* attributes\n    this.g = 0;\n    this.f = 0;\n    this.h = 0;\n    this.neighbours = [];\n    this.previous = undefined;\n\n    //BFS attributes\n    this.d = Infinity;\n    this.parent = null;\n    this.color = null;\n\n    //DFS attribute\n    this.visited = false;\n}\n\nexport default Spot;","import React, { useEffect, useState } from 'react';\nimport '../../styles/Board.css';\nimport Node from '../Node/Node';\nimport Spot from '../Node/Spot';\n\nconst Board = ({ grid, rows, columns, setGrid, setStartNode, setEndNode }) => {\n    const [wallState, setWallState] = useState(false);\n    const [startState, setStartState] = useState(false);\n    const [endState, setEndState] = useState(false);\n\n    useEffect(() => {\n        newBoard();\n    }, []);\n\n    const newBoard = () => {\n        const grid = new Array(rows);\n        for (let i = 0; i < rows; i++) {\n            grid[i] = new Array(columns);\n        }\n        setGrid(grid);\n        for (let i = 0; i < rows; i++) {\n            for (let j = 0; j < columns; j++) {\n                grid[i][j] = new Spot(i, j, rows, columns);\n            }\n        }\n        addNeighbours(grid);\n        setStartNode(grid[14][10]);\n        setEndNode(grid[14][50]);\n    };\n\n    const addNeighbours = (grid) => {\n        for (let i = 0; i < rows; i++) {\n            for (let j = 0; j < columns; j++) {\n                grid[i][j].addneighbours(grid);\n            }\n        }\n    };\n\n    const setWall = (e) => {\n        var eleArr = idToGridXY(e.target.id);\n        var thisClassName = document.getElementById(e.target.id).className;\n\n        if (e.type === 'mousedown' && !thisClassName.includes('node-start') && !thisClassName.includes('node-end')) {\n            setWallState(true);\n            document.getElementById(`${e.target.id}`).className = 'node node-wall';\n            grid[eleArr[0]][eleArr[1]].isWall = true;\n        } else if (e.type === 'mouseover' && wallState && !thisClassName.includes('node-start') && !thisClassName.includes('node-end')) {\n            document.getElementById(`${e.target.id}`).className = 'node node-wall';\n            grid[eleArr[0]][eleArr[1]].isWall = true;\n        } else if (e.type === 'mouseup' && wallState) {\n            setWallState(false);\n        }\n\n        else if (e.type === 'mousedown' && thisClassName.includes('node-start')) {\n            //must set isStart/change start state/change color\n            setStartState(true);\n            document.getElementById(`${e.target.id}`).className = 'node';\n            grid[eleArr[0]][eleArr[1]].isStart = false;\n        } else if (e.type === 'mouseover' && startState && !(grid[eleArr[0]][eleArr[1]].isEnd)) {\n            if (grid[eleArr[0]][eleArr[1]].isWall) {\n                grid[eleArr[0]][eleArr[1]].isWall = false;\n            }\n            document.getElementById(`${e.target.id}`).className = 'node node-start';\n        } else if (e.type === 'mouseleave' && startState && !(grid[eleArr[0]][eleArr[1]].isEnd)) {\n            document.getElementById(`${e.target.id}`).className = 'node';\n        } else if (e.type === 'mouseup' && startState) {\n            setStartState(false);\n            grid[eleArr[0]][eleArr[1]].isStart = true;\n            setStartNode(grid[eleArr[0]][eleArr[1]]);\n        }\n\n        else if (e.type === 'mousedown' && thisClassName.includes('node-end')) {\n            setEndState(true);\n            document.getElementById(`${e.target.id}`).className = 'node';\n            grid[eleArr[0]][eleArr[1]].isEnd = false;\n        } else if (e.type === 'mouseover' && endState && !(grid[eleArr[0]][eleArr[1]].isStart)) {\n            if (grid[eleArr[0]][eleArr[1]].isWall) {\n                grid[eleArr[0]][eleArr[1]].isWall = false;\n            }\n            document.getElementById(`${e.target.id}`).className = 'node node-end';\n        } else if (e.type === 'mouseleave' && endState && !(grid[eleArr[0]][eleArr[1]].isStart)) {\n            document.getElementById(`${e.target.id}`).className = 'node';\n        } else if (e.type === 'mouseup' && endState) {\n            setEndState(false);\n            grid[eleArr[0]][eleArr[1]].isEnd = true;\n            setEndNode(grid[eleArr[0]][eleArr[1]]);\n        }\n    };\n\n    const idToGridXY = (eleIdStr) => {\n        var arr = eleIdStr.split(/-/g).slice(0);\n        return arr;\n    };\n\n    return (\n        <div className='board'>\n            {grid.map((row, rowIndex) => {\n                return (\n                    <div key={rowIndex} className='row-wrapper'>\n                        {row.map((col, colIndex) => {\n                            const { isStart, isEnd, isWall } = col;\n                            return (\n                                <Node\n                                    setWall={setWall}\n                                    key={colIndex}\n                                    isStart={isStart}\n                                    isEnd={isEnd}\n                                    row={rowIndex}\n                                    col={colIndex}\n                                    isWall={isWall}\n                                />\n                            );\n                        })}\n                    </div>\n                );\n            })}\n        </div>\n    );\n};\n\nexport default Board;","const aStar = (startNode, endNode) => {\n    let openSet = [];\n    let closedSet = [];\n    let visitedNodes = [];\n\n    openSet.push(startNode);\n\n    while (openSet.length > 0) {\n        let leastIndex = 0;\n\n        for (let i = 0; i < openSet.length; i++) {\n            if (openSet[i].f < openSet[leastIndex].f) {\n                leastIndex = i;\n            }\n        }\n\n        let current = openSet[leastIndex];\n\n        if (current.x === endNode.x && current.y === endNode.y) {\n            let curr = current;\n            let path = [];\n            while (curr.previous) {\n                path.push(curr);\n                curr = curr.previous;\n            }\n            return { path, visitedNodes };\n        }\n\n        if (leastIndex > -1) {\n            openSet.splice(leastIndex, 1);\n        }\n\n        closedSet.push(current);\n        visitedNodes.push(current);\n\n\n        let neighbours = current.neighbours;\n        for (let i = 0; i < neighbours.length; i++) {\n            let neighbour = neighbours[i];\n            if (closedSet.includes(neighbour) || neighbour.isWall) {\n                continue;\n            }\n\n            let gScore = current.g + 1;\n            let gScoreIsBest = false;\n\n            if (!openSet.includes(neighbour)) {\n                gScoreIsBest = true;\n                neighbour.h = heuristic(neighbour, endNode);\n                openSet.push(neighbour);\n            } else if (gScore < neighbour.g) {\n                gScoreIsBest = true;\n            }\n\n            if (gScoreIsBest) {\n                neighbour.previous = current;\n                neighbour.g = gScore;\n                neighbour.f = neighbour.g + neighbour.h;\n            }\n        }\n    }\n\n    return [];\n};\n\nconst heuristic = (a, b) => {\n    let d1 = Math.abs(b.x - a.x);\n    let d2 = Math.abs(b.y - a.y);\n    return d1 + d2;\n};\n\nexport default aStar;","const bfs = (startNode, endNode) => {\n    var queue = [];\n    var path = [];\n    var visitedNodes = [];\n    let u;\n\n    startNode.d = 0;\n    startNode.color = 'gray';\n    queue.push(startNode);\n    visitedNodes.push(startNode);\n\n    while (queue.length > 0) {\n        u = queue.shift();\n\n        for (var i = 0; i < u.neighbours.length; i++) {\n            if ((u.neighbours[i].color === null) && !(u.neighbours[i].isWall) && !(u.neighbours[i] === endNode)) {\n                u.neighbours[i].color = 'gray';\n                u.neighbours[i].d = u.d + 1;\n                u.neighbours[i].parent = u;\n                visitedNodes.push(u.neighbours[i]);\n                queue.push(u.neighbours[i]);\n            }\n\n            else if (u.neighbours[i] === endNode) {\n                visitedNodes.push(endNode);\n                endNode.parent = u;\n                let x = endNode;\n                while (x.parent) {\n                    path.push(x);\n                    x = x.parent;\n                }\n                path.push(x);\n                return { path, visitedNodes };\n            }\n        }\n    }\n\n    return { path, visitedNodes };\n};\n\nexport default bfs;","var path = [];\nvar visitedNodes = [];\nvar found = false;\n\nconst recDfs = (startNode, endNode) => {\n    let u;\n\n    u = startNode;\n    u.visited = true;\n    visitedNodes.push(u);\n\n    for (let i = 0; i < u.neighbours.length; i++) {\n        // if (!u.neighbours[i].visited && !(u === endNode) && !u.isWall) {\n        if (!u.neighbours[i].visited && !(u === endNode) && !u.neighbours[i].isWall) {\n            // visitedNodes.push(u);\n            recDfs(u.neighbours[i], endNode);\n            if (found) {\n                path.push(u);\n                break;\n            }\n        } else if (u === endNode) {\n            path.push(u);\n            visitedNodes.push(u);\n            found = true;\n            return;\n        }\n    }\n};\n\nconst dfs = (startNode, endNode) => {\n    path = [];\n    visitedNodes = [];\n    found = false;\n    recDfs(startNode, endNode);\n    return { path, visitedNodes };\n};\n\nexport default dfs;\n","const dijkstra = (startNode, endNode) => {\n    let s = startNode;\n    s.d = 0;\n\n    let visited = [];\n    let path = [];\n    let queue = [];\n\n    queue.push(s);\n\n    while (queue.length > 0) {\n        let u = queue.shift();\n        u.visited = true;\n        visited.push(u);\n\n        for (let k = 0; k < u.neighbours.length; k++) {\n            if (!u.neighbours[k].visited && !(u.neighbours[k].isWall) && !(u.neighbours[k] === endNode)) {\n                Relax(u, u.neighbours[k], 1);\n                u.neighbours[k].visited = true;\n                queue.push(u.neighbours[k]);\n            } else if (u.neighbours[k] === endNode) {\n                visited.push(endNode);\n                endNode.parent = u;\n                let x = endNode;\n                while (x.parent) {\n                    path.push(x);\n                    x = x.parent;\n                }\n                path.push(x);\n                return { path, visited };\n            }\n        }\n    }\n};\n\nconst Relax = (u, k, w) => {\n    if (k.d > (u.d + w)) {\n        k.d = u.d + w;\n        k.parent = u;\n    }\n};\n\nexport default dijkstra;","const visualizeShortestPath = (shortestPathNodes, speed) => {\n    const reversed = shortestPathNodes.reverse();\n    for (let k = shortestPathNodes.length - 1; k >= 0; k--) {\n        setTimeout(() => {\n            const node = reversed[k];\n            if (node.isStart) {\n                document.getElementById(`${node.x}-${node.y}`).className = 'node node-start';\n            } else if (node.isEnd) {\n                document.getElementById(`${node.x}-${node.y}`).className = 'node node-end';\n            } else {\n                document.getElementById(`${node.x}-${node.y}`).className = 'node node-shortest-path';\n            }\n        }, speed * k);\n    }\n};\n\nconst visualizePath = (algoPath, visitedNodes, visSpeed) => {\n    let speed;\n    switch (visSpeed) {\n        case 'Fast':\n            speed = 20;\n            break;\n        case 'Medium':\n            speed = 25;\n            break;\n        case 'Slow':\n            speed = 30;\n    }\n\n    for (let i = 0; i <= visitedNodes.length; i++) {\n        if (i === visitedNodes.length) {\n            setTimeout(() => {\n                visualizeShortestPath(algoPath, speed);\n            }, speed * i);\n        } else {\n            setTimeout(() => {\n                const node = visitedNodes[i];\n                if (node.isStart) {\n                    document.getElementById(`${node.x}-${node.y}`).className = 'node node-start';\n                } else if (node.isEnd) {\n                    document.getElementById(`${node.x}-${node.y}`).className = 'node node-end';\n                } else {\n                    document.getElementById(`${node.x}-${node.y}`).className = 'node node-visited';\n                }\n            }, speed * i);\n        }\n    }\n};\n\nexport default visualizePath;","const visualizeWall = (wallPath, visSpeed) => {\n\n    let speed;\n    switch (visSpeed) {\n        case 'Fast':\n            speed = 10;\n            break;\n        case 'Medium':\n            speed = 15;\n            break;\n        case 'Slow':\n            speed = 20;\n            break;\n    }\n\n    for (let i = 0; i < wallPath.length; i++) {\n        setTimeout(() => {\n            document.getElementById(`${wallPath[i].x}-${wallPath[i].y}`).className = 'node node-wall';\n        }, speed * i);\n    }\n};\n\nexport default visualizeWall;","const recursiveWall = (grid, skew) => {\n    let height = grid.length;\n    let width = grid[0].length;\n    let wallPath = [];\n    divide(grid, 0, 0, width, height, chooseOrientation(width, height, skew), wallPath, skew);\n    return wallPath;\n};\n\nconst divide = (grid, x, y, width, height, orientation, wallPath, skew) => {\n    if (width < 3 || height < 3) {\n        return;\n    }\n\n    let horizontal;\n\n    if (orientation === 'HORIZONTAL') {\n        horizontal = true;\n    } else {\n        horizontal = false;\n    }\n\n    let wallX = x + (horizontal ? 0 : veryRand(1, width - 2));\n    let wallY = y + (horizontal ? veryRand(1, height - 2) : 0);\n\n    var passStart = Math.random(1) > 0.5 ? true : false;\n\n    let passageX = wallX + (horizontal ? (passStart ? width - 1 : 0) : 0);\n    let passageY = wallY + (horizontal ? 0 : (passStart ? height - 1 : 0));\n\n    let dx = horizontal ? 1 : 0;\n    let dy = horizontal ? 0 : 1;\n\n    let len = horizontal ? width : height;\n\n    for (let i = 0; i < len; i++) {\n        if (!(wallX === passageX) || !(wallY === passageY)) {\n            if (!(grid[wallY][wallX].isStart) && !(grid[wallY][wallX].isEnd)) {\n                wallPath.push(grid[wallY][wallX]);\n                grid[wallY][wallX].isWall = true;\n            }\n        }\n        wallX += dx;\n        wallY += dy;\n    }\n\n    let newX = x;\n    let newY = y;\n    let w = horizontal ? width : wallX - x;\n    let h = horizontal ? wallY - y : height;\n    divide(grid, newX, newY, w, h, chooseOrientation(w, h, skew), wallPath, skew);\n\n    newX = horizontal ? x : wallX + 1;\n    newY = horizontal ? wallY + 1 : y;\n    w = horizontal ? width : x + width - wallX - 1;\n    h = horizontal ? y + height - wallY - 1 : height;\n    divide(grid, newX, newY, w, h, chooseOrientation(w, h, skew), wallPath, skew);\n};\n\nconst veryRand = (min, max) => {\n    return min >= max ? min : Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst chooseOrientation = (width, height, skew) => {\n\n    let y;\n\n    switch (skew) {\n        case 'widthHeightBased':\n            if (width < height) {\n                return 'HORIZONTAL';\n            } else if (width > height) {\n                return 'VERTICAL';\n            } else {\n                y = (Math.random() >= 0.5) ? 1 : 0;\n                return y === 0 ? 'HORIZONTAL' : 'VERTICAL';\n            }\n        case 'horizontalBased':\n            y = (Math.random() >= 0.6) ? 1 : 0;\n            return y === 0 ? 'HORIZONTAL' : 'VERTICAL';\n        case 'verticalBased':\n            y = (Math.random() >= 0.35) ? 1 : 0;\n            return y === 0 ? 'HORIZONTAL' : 'VERTICAL';\n    }\n\n};\n\nexport default recursiveWall;","const stairWall = (grid) => {\n    const wallPath = [];\n\n    let j = 1;\n    for (let i = grid.length - 5; i > 0; i--) {\n        if (!grid[i][j].isStart && !grid[i][j].isEnd) {\n            grid[i][j].isWall = true;\n            wallPath.push(grid[i][j]);\n        }\n        j++;\n    }\n\n    for (let i = 2; i < grid.length - 4; i++) {\n        if (!grid[i][j].isStart && !grid[i][j].isEnd) {\n            grid[i][j].isWall = true;\n            wallPath.push(grid[i][j]);\n        }\n        j++;\n    }\n\n    for (let i = grid.length - 6; j < 60; i--) {\n        if (!grid[i][j].isStart && !grid[i][j].isEnd) {\n            grid[i][j].isWall = true;\n            wallPath.push(grid[i][j]);\n        }\n        j++;\n    }\n    return wallPath;\n};\n\nexport default stairWall;","const randomWall = (grid) => {\n    console.log('Random Wall');\n    const wallPath = [];\n\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[0].length; j++) {\n            if (Math.random(1) < 0.25 && !grid[i][j].isStart && !grid[i][j].isEnd) {\n                wallPath.push(grid[i][j]);\n                grid[i][j].isWall = true;\n            }\n\n        }\n    }\n\n    return wallPath;\n};\n\nexport default randomWall;","export default __webpack_public_path__ + \"static/media/arrow_down.83d8062c.png\";","import React, { useState } from 'react';\nimport '../../styles/DropDown.css';\nimport arrowDown from '../../images/arrow_down.png';\n\nconst DropDown = ({ dropName, itemArray }) => {\n    const [dropOpen, setDropOpen] = useState(false);\n\n    const toggleDrop = () => setDropOpen(!dropOpen);\n    const closeDrop = () => setDropOpen(false);\n\n    const initAlgo = ({ algo }) => {\n        algo.vis();\n        closeDrop();\n    };\n\n    const listToShow = () => {\n        return (\n            <div>\n                <ul>\n                    {itemArray.map(algo => (\n                        <li key={algo.name}\n                            className='listButton'\n                            onMouseDown={() => initAlgo(algo = { algo })}\n                        >\n                            {algo.name}\n                        </li>\n                    ))}\n                </ul>\n            </div >\n        );\n    };\n\n    return (\n        <div className='dropButton' onBlur={closeDrop}>\n            <button onClick={toggleDrop} onBlur={closeDrop}>\n                {dropName}\n                <div className='arrowContainer'>\n                    <img src={arrowDown} />\n                </div>\n            </button>\n            <div>\n                {dropOpen ? listToShow() : ''}\n            </div>\n        </div>\n    );\n};\n\nexport default DropDown;","import React, { useState } from 'react';\nimport '../../styles/DropDown.css';\nimport arrowDown from '../../images/arrow_down.png';\n\nconst DropDown = ({ initialSpeed, setVisSpeed }) => {\n    const [dropOpen, setDropOpen] = useState(false);\n    const toggleDrop = () => setDropOpen(!dropOpen);\n    const closeDrop = () => setDropOpen(false);\n\n\n    const listToShow = () => {\n        return (\n            <div>\n                <ul>\n                    <li className='listButton' onMouseDown={() => setVisSpeed('Fast')}>\n                        Fast\n                    </li>\n                    <li className='listButton' onMouseDown={() => setVisSpeed('Medium')}>\n                        Medium\n                    </li>\n                    <li className='listButton' onMouseDown={() => setVisSpeed('Slow')}>\n                        Slow\n                    </li>\n                </ul>\n            </div>\n        );\n    };\n\n    return (\n        <div className='dropButton' onBlur={closeDrop}>\n            <button onClick={toggleDrop} onBlur={closeDrop}>\n                Speed: {initialSpeed}\n                <div className='arrowContainer'>\n                    <img src={arrowDown} />\n                </div>\n            </button>\n            <div>\n                {dropOpen ? listToShow() : ''}\n            </div>\n        </div>\n    );\n};\n\nexport default DropDown;","import React, { useState } from 'react';\nimport '../../styles/Menu.css';\nimport aStar from '../../algorithms/aStar';\n// import greedyBfs from '../../algorithms/greedyBfs';\nimport bfs from '../../algorithms/bfs';\nimport dfs from '../../algorithms/dfs';\nimport dijkstra from '../../algorithms/dijkstra';\nimport visualizePath from '../Menu/Visualizer';\nimport visualizeWall from '../Menu/VisualizeWall';\nimport recursiveWall from '../../wallAlgos/recursiveWall';\nimport stairWall from '../../wallAlgos/stairWall';\nimport randomWall from '../../wallAlgos/randomWall';\n\nimport DropDown from './DropDown';\nimport DropDownSpeed from './DropDownSpeed';\n\n\nconst Menu = ({ grid, resetBoard, clearBoard, startNode, endNode }) => {\n    const [visSpeed, setVisSpeed] = useState('Fast');\n\n    const reloadPage = () => {\n        window.location.reload();\n    };\n\n    const visualizeAstar = async () => {\n        await clearBoard();\n        const aStarPath = aStar(startNode, endNode);\n        visualizePath(aStarPath.path, aStarPath.visitedNodes, visSpeed);\n    };\n\n    const visualizeBFS = async () => {\n        await clearBoard();\n        const bfsPath = bfs(startNode, endNode);\n        visualizePath(bfsPath.path, bfsPath.visitedNodes, visSpeed);\n    };\n\n    const visualizeDFS = async () => {\n        await clearBoard();\n        const dfsPath = dfs(startNode, endNode);\n        visualizePath(dfsPath.path, dfsPath.visitedNodes, visSpeed);\n    };\n\n    const visualizeDijkstra = async () => {\n        await clearBoard();\n        const dijkstraPath = dijkstra(startNode, endNode);\n        visualizePath(dijkstraPath.path, dijkstraPath.visited, visSpeed);\n    };\n\n    //reset board then generate your recursive walls\n    const visualizeStairWall = async () => {\n        await resetBoard();\n        const stairWallPath = stairWall(grid);\n        visualizeWall(stairWallPath, visSpeed);\n    };\n\n    const visualizeRandomWall = async () => {\n        await resetBoard();\n        const randomWallPath = randomWall(grid);\n        visualizeWall(randomWallPath, visSpeed);\n    };\n\n    const visualizeRecursiveWall = async () => {\n        await resetBoard();\n        const recursiveWallPath = recursiveWall(grid, 'widthHeightBased');\n        visualizeWall(recursiveWallPath, visSpeed);\n    };\n\n    const visualizeRecursiveWallHorizontal = async () => {\n        await resetBoard();\n        const recursiveWallPath = recursiveWall(grid, 'horizontalBased');\n        visualizeWall(recursiveWallPath, visSpeed);\n    };\n\n    const visualizeRecursiveWallVertical = async () => {\n        await resetBoard();\n        const recursiveWallPath = recursiveWall(grid, 'verticalBased');\n        visualizeWall(recursiveWallPath, visSpeed);\n    };\n\n    const algoArray = [\n        {\n            name: 'A* Search',\n            vis: visualizeAstar\n        },\n        {\n            name: 'Dijkstra\\'s Algorithm',\n            vis: visualizeDijkstra\n        },\n        {\n            name: 'Breadth-First Search',\n            vis: visualizeBFS\n        },\n        {\n            name: 'Depth-First Search',\n            vis: visualizeDFS\n        }\n    ];\n\n    const mazeArray = [\n        {\n            name: 'Recursive Walls',\n            vis: visualizeRecursiveWall\n        },\n        {\n            name: 'Recursive Walls [Horizontal Skew]',\n            vis: visualizeRecursiveWallHorizontal\n        },\n        {\n            name: 'Recursive Walls [Vertical Skew]',\n            vis: visualizeRecursiveWallVertical\n        },\n        {\n            name: 'Basic Stair Walls',\n            vis: visualizeStairWall\n        },\n        {\n            name: 'Random Walls',\n            vis: visualizeRandomWall\n        },\n    ];\n\n    // const visualizeGreedyBfs = async () => {\n    //     await clearBoard();\n    //     const greedyBfsPath = greedyBfs(startNode, endNode);\n    //     // visualizePath(greedyBfsPath.path, greedyBfsPath.visitedNodes, visSpeed);\n    // };\n\n    return (\n        <div className='menu-banner'>\n            <h1 onClick={reloadPage}>PATHFINDER</h1>\n            <DropDown\n                dropName='Algorithms'\n                itemArray={algoArray}\n            />\n            <DropDown\n                dropName='Wall Patterns'\n                itemArray={mazeArray}\n            />\n            {/* <button onClick={clearBoard}>Clear Board [Keep Walls]</button> */}\n            <DropDownSpeed\n                initialSpeed={visSpeed}\n                setVisSpeed={setVisSpeed}\n            />\n            <button onClick={resetBoard}>Reset Board</button>\n            {/* <button onClick={visualizeGreedyBfs}>Greedy Best-First Search</button> */}\n        </div>\n    );\n};\n\nexport default Menu;","import React from 'react';\nimport '../styles/Legend.css';\nimport Node from '../components/Node/Node';\n\nconst Legend = () => {\n\n\n    return (\n        <div className='legendWrapper'>\n            <div className='legendItem'>\n                <Node isStart={true} />\n                <span>Start-Node</span>\n            </div>\n            <div className='legendItem'>\n                <Node isEnd={true} />\n                <span>Target-Node</span>\n            </div>\n            <div className='legendItem'>\n                <div className='visited'></div>\n                <span>Visited-Nodes</span>\n            </div>\n            <div className='legendItem'>\n                <div className='shortest'></div>\n                <span>Shortest-Path</span>\n            </div>\n            <div className='legendItem'>\n                <Node isWall={true} />\n                <span>Wall-Node</span>\n            </div>\n        </div>\n    );\n};\n\nexport default Legend;","import React, { useState } from 'react';\nimport Board from './components/Board/Board';\nimport Menu from './components/Menu/Menu';\nimport Spot from './components/Node/Spot';\nimport Legend from './components/Legend';\nimport './styles/styles.css';\n\nconst App = () => {\n  const [grid, setGrid] = useState([]);\n  const [startNode, setStartNode] = useState(null);\n  const [endNode, setEndNode] = useState(null);\n  const rows = 29;\n  const columns = 61;\n\n  //does not clear walls\n  const clearBoard = () => {\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        let x = document.getElementById(`${i}-${j}`).className;\n        if (x.includes('node-visited') || x.includes('node-shortest-path')) {\n          document.getElementById(`${i}-${j}`).className = 'node';\n        }\n        // grid[i][j] = null;\n        grid[i][j] = new Spot(i, j, rows, columns);\n        if (x.includes('node-wall')) {\n          // console.log('WALL');\n          grid[i][j].isWall = true;\n          // console.log(grid[i-1][j].neighbours);\n        }\n      }\n    }\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        grid[i][j].addneighbours(grid);\n      }\n    }\n\n    // grid[10][6].isStart = false;\n    // grid[10][34].isEnd = false;\n    grid[14][10].isStart = false;\n    grid[14][50].isEnd = false;\n\n    grid[startNode.x][startNode.y].isStart = true;\n    grid[endNode.x][endNode.y].isEnd = true;\n    setStartNode(grid[startNode.x][startNode.y]);\n    setEndNode(grid[endNode.x][endNode.y]);\n    // console.log(startNode);\n  };\n\n  //clears walls\n  const resetBoard = () => {\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        let x = document.getElementById(`${i}-${j}`).className;\n        if (x.includes('node-visited') || x.includes('node-shortest-path') || x.includes('node-wall')) {\n          document.getElementById(`${i}-${j}`).className = 'node';\n          if (x.includes('node-wall')) {\n            let y = document.getElementById(`${i}-${j}`).id;\n            var eleArr = idToGridXY(y);\n            grid[eleArr[0]][eleArr[1]].isWall = false;\n          }\n        }\n      }\n    }\n  };\n\n  const idToGridXY = (eleIdStr) => {\n    var arr = eleIdStr.split(/-/g).slice(0);\n    return arr;\n  };\n\n  return (\n    <div className='wrapper'>\n      <Menu\n        grid={grid}\n        clearBoard={clearBoard}\n        resetBoard={resetBoard}\n        startNode={startNode}\n        endNode={endNode}\n      />\n      <Legend />\n      <div className='board'>\n        <Board\n          grid={grid}\n          rows={rows}\n          columns={columns}\n          setGrid={setGrid}\n          setStartNode={setStartNode}\n          setEndNode={setEndNode}\n        />\n      </div>\n      {/* <div className='message'>\n        {message}\n      </div> */}\n      {/* <Footer /> */}\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}